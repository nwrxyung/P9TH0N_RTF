/// Получение данных

vacancy = input('Введите название вакансии: ')
vacancy_description = input('Введите описание вакансии: ')
city = input('Введите город для вакансии: ')
work_exp = input('Введите требуемый опыт работы (лет): ')
salary_lower = input('Введите нижнюю границу оклада вакансии: ')
salary_upper = input('Введите верхнюю границу оклада вакансии: ')
free_schedule = input('Нужен свободный график (да / нет): ')
premium_vacancy = input('Является ли данная вакансия премиум-вакансией (да / нет): ')

def inputs(vacancy, vacancy_description, city, work_exp, salary_lower, salary_upper, free_schedule, premium_vacancy):
    if isinstance(vacancy, str):
        print(vacancy, f'({type(vacancy).__name__})')

    if isinstance(vacancy_description, str):
        print(vacancy_description, f'({type(vacancy_description).__name__})')

    if isinstance(city, str):
        print(city, f'({type(city).__name__})')

    try:
        work_exp = int(work_exp)
        print(work_exp, f'({type(work_exp).__name__})')
    except ValueError:
        print('Опыт работы должен быть числом.')

    try:
        salary_lower = int(salary_lower)
        print(salary_lower, f'({type(salary_lower).__name__})')
    except ValueError:
        print('Нижняя граница оклада должна быть числом.')

    try:
        salary_upper = int(salary_upper)
        print(salary_upper, f'({type(salary_upper).__name__})')
    except ValueError:
        print('Верхняя граница оклада должна быть числом.')

    if free_schedule in ['да', 'нет']:
        if free_schedule == 'да':
            free_schedule = True
            print(free_schedule, f'({type(free_schedule).__name__})')
        else:
            free_schedule = False
            print(free_schedule, f'({type(free_schedule).__name__})')

    if premium_vacancy in ['да', 'нет']:
        if premium_vacancy == 'да':
            premium_vacancy = True
            print(premium_vacancy, f'({type(premium_vacancy).__name__})')
        else:
            premium_vacancy = False
            print(premium_vacancy, f'({type(premium_vacancy).__name__})')
        
inputs(vacancy, vacancy_description, city, work_exp, salary_lower, salary_upper, free_schedule, premium_vacancy)


// Примечание-комментарий от препода: lines 20--36: в этой задаче такая проверка не требуется



/// Формирование данных 

vacancy = input('Введите название вакансии: ')
vacancy_description = input('Введите описание вакансии: ')
city = input('Введите город для вакансии: ')
work_exp = input('Введите требуемый опыт работы (лет): ')
salary_lower = input('Введите нижнюю границу оклада вакансии: ')
salary_upper = input('Введите верхнюю границу оклада вакансии: ')
free_schedule = input('Нужен свободный график (да / нет): ')
premium_vacancy = input('Является ли данная вакансия премиум-вакансией (да / нет): ')

def inputs(vacancy, vacancy_description, city, work_exp, salary_lower, salary_upper, free_schedule, premium_vacancy):
    if isinstance(vacancy, str):
        print(vacancy)

    if isinstance(vacancy_description, str):
        print(f'Описание: {vacancy_description}')

    if isinstance(city, str):
        print(f'Город: {city}')

    try:
        work_exp = int(work_exp)
        if (work_exp == 0) or (work_exp % 10 == 0):
            print(f'Требуемый опыт работы: {work_exp} лет')
        elif (work_exp == 1) or (work_exp % 10 == 1):
            print(f'Требуемый опыт работы: {work_exp} год')
        elif (work_exp % 10 >= 2 and work_exp % 10 < 5):
            print(f'Требуемый опыт работы: {work_exp} года')
        else:
            print(f'Требуемый опыт работы: {work_exp} лет')
                
    except ValueError:
        print('Опыт работы должен быть числом.')

    try:
        salary_lower = int(salary_lower)
        salary_upper = int(salary_upper)
        salary = (salary_lower + salary_upper) // 2;
        if (salary == 0) or (salary % 10 == 0):
            print(f'Средний оклад: {salary} рублей')
        elif (salary == 1) or (salary % 10 == 1):
            print(f'Средний оклад: {salary} рубль')
        elif ((salary > 20 or salary < 10) and salary % 10 >= 2 and salary % 10 < 5):
            print(f'Средний оклад: {salary} рубля')
        else:
            print(f'Средний оклад: {salary} рублей')
    except ValueError:
        print('Нижняя и верхняя граница оклада должна быть числом.')

    if free_schedule in ['да', 'нет']:
        print(f'Свободный график: {free_schedule}')

    if premium_vacancy in ['да', 'нет']:
        print(f'Премиум-вакансия: {premium_vacancy}')

inputs(vacancy, vacancy_description, city, work_exp, salary_lower, salary_upper, free_schedule, premium_vacancy)

//  Примечание-комментарий от препода: lines 10--18: лучше не делать суперсложные функции, которые делают сразу несколько разных действий
одна функция склоняет слова, вторая проверяет корректность данных и т.д.


/// Некорректные данные

def input_with_validation(prompt, validation_func):
    while True:
        value = input(prompt)
        if validation_func(value):
            return value
        print('Данные некорректны, повторите ввод')

def is_non_empty_string(value):
    if isinstance(value, str):
        if value.strip() != '':
            return True
    return False

def is_int(value):
    try:
        int(value)
        return True
    except ValueError:
        return False

def is_boolean(value):
    if value in ['да', 'нет']:
        return True
    return False

def getDeclensionExp(number):
    number = int(number)
    if number == 0 or number % 10 == 0:
        return f'Требуемый опыт работы: {number} лет'
    elif number % 10 == 1:
        return f'Требуемый опыт работы: {number} год'
    elif 2 <= number % 10 <= 4:
        return f'Требуемый опыт работы: {number} года'
    else:
        return f'Требуемый опыт работы: {number} лет'

def getDeclensionSalary(startValue, finalValue):
    startValue = int(startValue)
    finalValue = int(finalValue)
    salary = (startValue + finalValue) // 2
    if salary == 0 or salary % 10 == 0:
        return f'Средний оклад: {salary} рублей'
    elif salary % 10 == 1:
        return f'Средний оклад: {salary} рубль'
    elif (salary > 20 or salary < 10) and 2 <= salary % 10 < 5:
        return f'Средний оклад: {salary} рубля'
    else:
        return f'Средний оклад: {salary} рублей'

# Получение данных от пользователя
vacancy = input_with_validation('Введите название вакансии: ', is_non_empty_string)
vacancy_description = input_with_validation('Введите описание вакансии: ', is_non_empty_string)
city = input_with_validation('Введите город для вакансии: ', is_non_empty_string)
work_exp = input_with_validation('Введите требуемый опыт работы (лет): ', is_int)

# Обработка границ оклада с повторным вводом в случае ошибок
while True:
    salary_lower = input_with_validation('Введите нижнюю границу оклада вакансии: ', is_int)
    salary_upper = input_with_validation('Введите верхнюю границу оклада вакансии: ', is_int)
    
    if int(salary_lower) > int(salary_upper):
        print('Нижняя граница оклада должна быть не больше верхней границы. Повторите ввод.')
    else:
        break

free_schedule = input_with_validation('Нужен свободный график (да / нет): ', is_boolean)
premium_vacancy = input_with_validation('Является ли данная вакансия премиум-вакансией (да / нет): ', is_boolean)

# Вывод результатов
print(vacancy)
print(f'Описание: {vacancy_description}')
print(f'Город: {city}')
print(getDeclensionExp(work_exp))
print(getDeclensionSalary(salary_lower, salary_upper))
print(f'Свободный график: {free_schedule}')
print(f'Премиум-вакансия: {premium_vacancy}')
    
