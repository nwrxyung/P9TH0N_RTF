// Профилирование

import cProfile
from functions_to_profile import load_files, read_database, get_id, get_user_data, generate_words
import pstats


TASK_FUNCTIONS_ORDER = ['load_files', 'read_database', 'get_id', 'get_user_data', 'generate_words']

profiler = cProfile.Profile()

profiler.enable()

for func in [load_files, read_database, get_id, get_user_data, generate_words]:
    func()

profiler.disable()

stats = pstats.Stats(profiler)

stats.strip_dirs()
total_time = stats.total_tt

for func_name in TASK_FUNCTIONS_ORDER:
    for key, value in stats.stats.items():
        if func_name in key[2]:
            func_time = value[3]
            func_percent = round(func_time / total_time * 100)
            print(f"{func_time:.4f}: {func_percent:.0f}%")

// Тестирование

class TestDivide(TestCase):

    def test_both_positive(self):
        self.assertEqual(divide(4, 2), 2)

    def test_first_positive_second_negative(self):
        self.assertEqual(divide(4, -2), -2)

    def test_first_negative_second_positive(self):
        self.assertEqual(divide(-4, 2), -2)

    def test_both_negative(self):
        self.assertEqual(divide(-4, -2), 2)

    def test_both_big(self):
        self.assertEqual(divide(10**12, 10**11), 10.0)

    def test_first_big_second_zero(self):
        self.assertEqual(divide(10**12, 0), "Can't divide by zero")

    def test_first_zero_second_big(self):
        self.assertEqual(divide(0, 10**12), 0)

    def test_both_float(self):
        self.assertEqual(divide(1.5, 0.5), 3.0)

    def test_first_float_second_positive(self):
        self.assertEqual(divide(1.5, 3), 0.5)

    def test_first_negative_second_float(self):
        self.assertAlmostEqual(divide(-5, 1.1), -4.545454545454546, places=7)

    def test_both_float_negative(self):
        self.assertEqual(divide(-1.5, -0.5), 3.0)

    def test_divide_by_zero(self):
        self.assertEqual(divide(4, 0), "Can't divide by zero")

    def test_zero_dividend(self):
        self.assertEqual(divide(0, 5), 0)

    def test_both_zero(self):
        self.assertEqual(divide(0, 0), "Can't divide by zero")

    def test_small_numbers(self):
        self.assertAlmostEqual(divide(1e-7, 2e-7), 0.5, places=10)

    def test_negative_small_numbers(self):
        self.assertAlmostEqual(divide(-1e-7, -2e-7), 0.5, places=10)

    def test_subnormal_numbers(self):
        self.assertAlmostEqual(divide(1e-308, 1e-308), 1.0, places=10)

    def test_negative_and_zero(self):
        self.assertEqual(divide(-0.0, 1), 0.0)


// Документация

import random

def get_sum(a, b):
    """
    Sums up two numbers
    :param a: first number
    :param b: second number
    :return: sum of a and b
    """
    return a + b

def generate_words(count, word_len, alpha):
    """
    Generates list of random words
    :param count: word count
    :param word_len: word length
    :param alpha: alphabet
    :return: list of random words
    """
    return [''.join([random.choice(alpha) for _ in range(word_len)]) for _ in range(count)]

def get_id(length):
    """
    Generates random id
    :param length: id length
    :return: generated random id
    """
    return ''.join(map(str, [random.randint(0, 9) for _ in range(length)]))

def register_new_user(name, age, email):
    """
    Register new user in system
    :param name: user name
    :param age: user age
    :param email: user email
    :return: registered user
    """
    return MyUser(name, age, email)

class MyUser:
    def __init__(self, name, age, email):
        """
        initialisation of class
        :param name: user name
        :param age: user age
        :param email: user email
        """
        self.name = name
        self.age = age
        self.email = email
        self.user_id = get_id(6)

    def get_card(self):
        """
        Get user data
        :return: user data in string format
        """
        return f'{self.user_id}: {self.name} ({self.age})'

    def upload_to_database(self):
        """
        Upload user data to database
        :return: None
        """
        raise NotImplementedError

