// Курсы валют

import pandas as pd
import sqlite3

database_name = input()
csv_file = input()
table_name = input()

df = pd.read_csv(csv_file)

with sqlite3.connect(database_name) as conn:
    df.to_sql(table_name, conn, if_exists='replace', index=False)

// Аналитика 

import pandas as pd
import sqlite3


database_name = input()
table_name = input()
vac_name = input()

conn = sqlite3.connect(database_name)

df_years_salary = pd.read_sql(f"""
    SELECT 
        strftime('%Y', published_at) AS 'Год',
        ROUND(AVG(salary), 2) AS 'Средняя з/п'
    FROM {table_name}
    GROUP BY strftime('%Y', published_at)
    ORDER BY 'Год'
""", conn)

df_years_count = pd.read_sql(f"""
    SELECT 
        strftime('%Y', published_at) AS 'Год',
        COUNT(*) AS 'Количество вакансий'
    FROM {table_name}
    WHERE salary IS NOT NULL
    GROUP BY strftime('%Y', published_at)
    ORDER BY 'Год'
""", conn)

df_years_salary_vac = pd.read_sql(f"""
    SELECT 
        strftime('%Y', published_at) AS 'Год',
        ROUND(AVG(salary), 2) AS 'Средняя з/п - {vac_name}'
    FROM {table_name}
    WHERE name LIKE '%' || ? || '%'
    GROUP BY strftime('%Y', published_at)
    ORDER BY 'Год'
""", conn, params=(vac_name,))

df_years_count_vac = pd.read_sql(f"""
    SELECT 
        strftime('%Y', published_at) AS 'Год',
        COUNT(*) AS 'Количество вакансий - {vac_name}'
    FROM {table_name}
    WHERE name LIKE '%' || ? || '%' AND salary IS NOT NULL
    GROUP BY strftime('%Y', published_at)
    ORDER BY 'Год'
""", conn, params=(vac_name,))

# Уровень зарплат по городам
df_area_salary = pd.read_sql(
    f"""
    SELECT 
        area_name AS Город, 
        AVG_salary AS "Уровень зарплат по городам"
    FROM (
        SELECT 
            area_name, 
            ROUND(AVG(salary), 2) AS AVG_salary, 
            COUNT(1) * 1.0 / (SELECT COUNT(*) FROM {table_name}) AS vacancy_share
        FROM {table_name}
        GROUP BY area_name
        HAVING vacancy_share >= 0.008
    )
    ORDER BY AVG_salary DESC, Город
    LIMIT 10;
    """,
    conn
)

df_area_count = pd.read_sql(
    f"""
    SELECT 
        area_name AS Город, 
        COUNT(*) * 1.0 / (SELECT COUNT(*) FROM {table_name}) AS `Доля вакансий`
    FROM {table_name}
    GROUP BY area_name
    HAVING COUNT(*) >= (SELECT COUNT(*) * 0.01 FROM {table_name})
    ORDER BY `Доля вакансий` DESC
    LIMIT 10;
    """,
    conn
)

conn.close()
